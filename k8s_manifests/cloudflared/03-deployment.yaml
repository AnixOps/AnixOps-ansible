---
# =============================================================================
# Cloudflare Tunnel Deployment
# =============================================================================
# 高可用 cloudflared Deployment，包含多个副本和健康检查
# High-availability cloudflared Deployment with multiple replicas and health checks
# =============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: cloudflare-tunnel
  labels:
    app: cloudflared
    component: ingress-tunnel
    managed-by: anixops
spec:
  # -------------------------------------------------------------------------
  # 副本配置 | Replica Configuration
  # -------------------------------------------------------------------------
  # 高可用：运行 3 个副本
  # High availability: Run 3 replicas
  replicas: 3
  
  # -------------------------------------------------------------------------
  # 更新策略 | Update Strategy
  # -------------------------------------------------------------------------
  # 滚动更新：逐步替换 Pod，确保服务不中断
  # Rolling update: Gradually replace Pods to ensure no service interruption
  strategy:
    type: RollingUpdate
    rollingUpdate:
      # 更新时最多额外创建 1 个 Pod
      # Maximum 1 extra Pod during update
      maxSurge: 1
      # 更新时最多 1 个 Pod 不可用
      # Maximum 1 unavailable Pod during update
      maxUnavailable: 1
  
  # -------------------------------------------------------------------------
  # 选择器 | Selector
  # -------------------------------------------------------------------------
  selector:
    matchLabels:
      app: cloudflared
  
  # -------------------------------------------------------------------------
  # Pod 模板 | Pod Template
  # -------------------------------------------------------------------------
  template:
    metadata:
      labels:
        app: cloudflared
        version: "2024.10.0"
      annotations:
        # Prometheus 抓取配置
        # Prometheus scrape configuration
        prometheus.io/scrape: "true"
        prometheus.io/port: "2000"
        prometheus.io/path: "/metrics"
    
    spec:
      # ---------------------------------------------------------------------
      # 容器配置 | Container Configuration
      # ---------------------------------------------------------------------
      containers:
        - name: cloudflared
          # 使用官方镜像（建议固定版本）
          # Use official image (recommend pinning version)
          image: cloudflare/cloudflared:2024.10.0
          
          # 镜像拉取策略
          # Image pull policy
          imagePullPolicy: IfNotPresent
          
          # 启动参数
          # Startup arguments
          args:
            - tunnel
            - --config
            - /etc/cloudflared/config.yaml
            - run
          
          # 环境变量：从 Secret 读取 Tunnel Token
          # Environment variables: Read Tunnel Token from Secret
          env:
            - name: TUNNEL_TOKEN
              valueFrom:
                secretKeyRef:
                  name: cloudflared-token
                  key: token
          
          # 端口配置
          # Port configuration
          ports:
            # Metrics 端口（用于 Prometheus 监控）
            # Metrics port (for Prometheus monitoring)
            - name: metrics
              containerPort: 2000
              protocol: TCP
          
          # 挂载配置文件
          # Mount configuration file
          volumeMounts:
            - name: config
              mountPath: /etc/cloudflared
              readOnly: true
          
          # 资源限制
          # Resource limits
          resources:
            requests:
              # 最小资源：50m CPU, 64Mi 内存
              # Minimum resources: 50m CPU, 64Mi memory
              cpu: 50m
              memory: 64Mi
            limits:
              # 最大资源：200m CPU, 128Mi 内存
              # Maximum resources: 200m CPU, 128Mi memory
              cpu: 200m
              memory: 128Mi
          
          # 存活探测（Liveness Probe）
          # 如果失败，Kubernetes 会重启容器
          # If fails, Kubernetes will restart the container
          livenessProbe:
            httpGet:
              path: /ready
              port: 2000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          # 就绪探测（Readiness Probe）
          # 如果失败，Kubernetes 会将 Pod 从 Service 中移除
          # If fails, Kubernetes will remove Pod from Service
          readinessProbe:
            httpGet:
              path: /ready
              port: 2000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2
      
      # ---------------------------------------------------------------------
      # 卷配置 | Volume Configuration
      # ---------------------------------------------------------------------
      volumes:
        - name: config
          configMap:
            name: cloudflared-config
            items:
              - key: config.yaml
                path: config.yaml
      
      # ---------------------------------------------------------------------
      # Pod 调度策略 | Pod Scheduling Strategy
      # ---------------------------------------------------------------------
      # Pod 反亲和性：尽量将 Pod 分散到不同的节点
      # Pod anti-affinity: Spread Pods across different nodes
      affinity:
        podAntiAffinity:
          # 软性约束：尽量满足，但不强制
          # Soft constraint: Try to satisfy, but not mandatory
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - cloudflared
                # 拓扑键：按主机名（节点）分散
                # Topology key: Spread by hostname (node)
                topologyKey: kubernetes.io/hostname
      
      # ---------------------------------------------------------------------
      # 容忍度 | Tolerations (可选)
      # ---------------------------------------------------------------------
      # 如果需要在特定节点（如 Master 节点）上运行，取消注释
      # Uncomment if you need to run on specific nodes (e.g., Master nodes)
      # tolerations:
      #   - key: "node-role.kubernetes.io/master"
      #     operator: "Exists"
      #     effect: "NoSchedule"
      #   - key: "node-role.kubernetes.io/control-plane"
      #     operator: "Exists"
      #     effect: "NoSchedule"
      
      # ---------------------------------------------------------------------
      # 安全上下文 | Security Context (可选)
      # ---------------------------------------------------------------------
      # 以非 root 用户运行（增强安全性）
      # Run as non-root user (enhanced security)
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532  # cloudflared 默认用户
        fsGroup: 65532
      
      # ---------------------------------------------------------------------
      # DNS 策略 | DNS Policy
      # ---------------------------------------------------------------------
      # 使用集群内部 DNS
      # Use cluster internal DNS
      dnsPolicy: ClusterFirst
      
      # ---------------------------------------------------------------------
      # 重启策略 | Restart Policy
      # ---------------------------------------------------------------------
      restartPolicy: Always

# =============================================================================
# 部署说明 | Deployment Notes
# =============================================================================
#
# 1. 部署前准备:
#    - 确保已创建 Namespace: kubectl apply -f 00-namespace.yaml
#    - 确保已创建 Secret: kubectl apply -f 01-secret.yaml
#    - 确保已创建 ConfigMap: kubectl apply -f 02-configmap.yaml
#
# 2. 部署命令:
#    kubectl apply -f 03-deployment.yaml
#
# 3. 验证部署:
#    kubectl get pods -n cloudflare-tunnel
#    kubectl logs -n cloudflare-tunnel -l app=cloudflared --tail=50
#
# 4. 扩缩容:
#    kubectl scale deployment cloudflared --replicas=5 -n cloudflare-tunnel
#
# 5. 滚动更新:
#    kubectl set image deployment/cloudflared \
#      cloudflared=cloudflare/cloudflared:2024.11.0 \
#      -n cloudflare-tunnel
#
# 6. 回滚:
#    kubectl rollout undo deployment/cloudflared -n cloudflare-tunnel
#
# =============================================================================
