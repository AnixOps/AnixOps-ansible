---
# =============================================================================
# Pod Disruption Budget (PDB)
# =============================================================================
# 确保在节点维护或自愿中断期间，始终有最小数量的 cloudflared Pods 运行
# Ensure minimum number of cloudflared Pods are running during node maintenance
# or voluntary disruptions
# =============================================================================

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cloudflared-pdb
  namespace: cloudflare-tunnel
  labels:
    app: cloudflared
spec:
  # -------------------------------------------------------------------------
  # 最小可用副本数 | Minimum Available Replicas
  # -------------------------------------------------------------------------
  # 在任何自愿中断期间，至少保持 2 个 Pod 可用
  # During any voluntary disruption, keep at least 2 Pods available
  minAvailable: 2
  
  # 或者使用 maxUnavailable（二选一）:
  # Or use maxUnavailable (choose one):
  # maxUnavailable: 1  # 最多允许 1 个 Pod 不可用
  
  # -------------------------------------------------------------------------
  # 选择器 | Selector
  # -------------------------------------------------------------------------
  # 选择哪些 Pods 受此 PDB 保护
  # Select which Pods are protected by this PDB
  selector:
    matchLabels:
      app: cloudflared

# =============================================================================
# PDB 说明 | PDB Notes
# =============================================================================
#
# 1. PDB 的作用:
#    - 防止在节点维护时同时驱逐太多 Pod
#    - 确保服务的高可用性
#    - 只影响"自愿"中断（如节点 drain），不影响"非自愿"中断（如节点崩溃）
#
# 2. 部署 PDB:
#    kubectl apply -f 05-pdb.yaml
#
# 3. 查看 PDB 状态:
#    kubectl get pdb -n cloudflare-tunnel
#    kubectl describe pdb cloudflared-pdb -n cloudflare-tunnel
#
# 4. 测试 PDB（模拟节点维护）:
#    # 标记节点为不可调度
#    kubectl cordon <node-name>
#    
#    # 驱逐节点上的 Pods（PDB 会生效）
#    kubectl drain <node-name> --ignore-daemonsets --delete-emptydir-data
#    
#    # 观察 Pod 驱逐过程
#    kubectl get pods -n cloudflare-tunnel -w
#    
#    # 恢复节点
#    kubectl uncordon <node-name>
#
# 5. minAvailable vs maxUnavailable:
#    - minAvailable: 指定最少可用数量（如 2）
#    - maxUnavailable: 指定最多不可用数量（如 1）
#    - 只能使用其中一个，不能同时使用
#
# 6. 使用场景:
#    - Kubernetes 版本升级
#    - 节点维护或重启
#    - 集群缩容
#    - 使用 kubectl drain 命令
#
# =============================================================================
