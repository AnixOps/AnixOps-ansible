---
# =============================================================================
# 部署应用到 K8s 集群
# Deploy Application to K8s Cluster
# =============================================================================
# 此 playbook 用于将应用部署到远程或本地 K8s 集群
# This playbook deploys applications to remote or local K8s clusters
#
# 使用方法 | Usage:
#   ansible-playbook playbooks/deployment/deploy_app_to_k8s.yml \
#     -i inventory/hosts.yml \
#     -e "target_group=nginx_test" \
#     -e "manifest_dir=k8s_manifests/api-with-cloudflared-sidecar"
# =============================================================================

- name: Deploy Application to K8s Cluster
  hosts: "{{ target_group | default('nginx_test') }}"
  gather_facts: yes
  become: no
  
  vars:
    # 默认配置 | Default Configuration
    default_manifest_dir: "k8s_manifests/api-with-cloudflared-sidecar"
    default_namespace: "default"
    actual_namespace: "{{ app_namespace | default(default_namespace) }}"
    actual_manifest_dir: "{{ app_manifest_path | default(manifest_dir) | default(default_manifest_dir) }}"
    manifest_files:
      - namespace.yaml
      - configmap.yaml
      - secret.yaml
      - deployment.yaml
      - service.yaml
      - ingress.yaml
    
  tasks:
    - name: Display deployment information
      ansible.builtin.debug:
        msg:
          - "╔════════════════════════════════════════════════════════════════╗"
          - "║  🚀 Deploy Application to K8s Cluster                        ║"
          - "╚════════════════════════════════════════════════════════════════╝"
          - ""
          - "🎯 Target Host: {{ inventory_hostname }}"
          - "🏷️  App Name: {{ app_name | default('unknown') }}"
          - "📦 Namespace: {{ actual_namespace }}"
          - "🔧 Deployment Type: {{ deployment_type | default('local') }}"
          - "📁 Manifest Dir: {{ actual_manifest_dir }}"
          - "🌐 Cluster: {{ cluster_endpoint | default('localhost') }}"
      tags:
        - always

    - name: Check if kubeconfig exists locally
      ansible.builtin.stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_stat
      delegate_to: localhost
      when: deployment_type == 'remote_k3s'

    - name: Fail if kubeconfig not found
      ansible.builtin.fail:
        msg: |
          ❌ Kubeconfig not found at {{ kubeconfig_path }}
          Please run the cluster provisioning first:
            cd scripts && bash anixops.sh deploy-remote-test
      when: 
        - deployment_type == 'remote_k3s'
        - not kubeconfig_stat.stat.exists
    
    - name: Display kubeconfig status
      ansible.builtin.debug:
        msg: "✅ Kubeconfig found: {{ kubeconfig_path }}"
      when: 
        - deployment_type == 'remote_k3s'
        - kubeconfig_stat.stat.exists

    - name: Check if manifest directory exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/../../{{ actual_manifest_dir }}"
      register: manifest_dir_stat
      delegate_to: localhost

    - name: Fail if manifest directory not found
      ansible.builtin.fail:
        msg: "❌ Manifest directory not found: {{ actual_manifest_dir }}"
      when: not manifest_dir_stat.stat.exists

    - name: Find all YAML manifests in directory
      ansible.builtin.find:
        paths: "{{ playbook_dir }}/../../{{ actual_manifest_dir }}"
        patterns: "*.yaml,*.yml"
        excludes: "*.example.yaml,*.example.yml"
      register: found_manifests
      delegate_to: localhost

    - name: Display found manifests
      ansible.builtin.debug:
        msg:
          - "📄 Found {{ found_manifests.files | length }} manifest files:"
          - "{{ found_manifests.files | map(attribute='path') | map('basename') | list }}"

    - name: Apply Kubernetes manifests
      ansible.builtin.shell: |
        export KUBECONFIG="{{ kubeconfig_path }}"
        kubectl apply -f "{{ item.path }}"
      loop: "{{ found_manifests.files | sort(attribute='path') }}"
      register: kubectl_apply
      delegate_to: localhost
      changed_when: "'configured' in kubectl_apply.stdout or 'created' in kubectl_apply.stdout"
      failed_when: kubectl_apply.rc != 0

    - name: Display apply results
      ansible.builtin.debug:
        msg: "{{ item.stdout_lines }}"
      loop: "{{ kubectl_apply.results }}"
      when: item.stdout_lines is defined

    - name: Wait for deployments to be ready
      ansible.builtin.shell: |
        export KUBECONFIG="{{ kubeconfig_path }}"
        kubectl rollout status deployment -n {{ actual_namespace }} --timeout=300s
      register: rollout_status
      delegate_to: localhost
      changed_when: false
      failed_when: false

    - name: Get deployment status
      ansible.builtin.shell: |
        export KUBECONFIG="{{ kubeconfig_path }}"
        kubectl get deployments,pods,services -n {{ actual_namespace }}
      register: deployment_status
      delegate_to: localhost
      changed_when: false

    - name: Display deployment status
      ansible.builtin.debug:
        msg:
          - "╔════════════════════════════════════════════════════════════════╗"
          - "║  ✅ Deployment Complete                                       ║"
          - "╚════════════════════════════════════════════════════════════════╝"
          - ""
          - "{{ deployment_status.stdout_lines }}"
          - ""
          - "📋 Next Steps:"
          - "  • Check pods: kubectl get pods -n {{ actual_namespace }}"
          - "  • Check logs: kubectl logs -n {{ actual_namespace }} <pod-name>"
          - "  • Port forward: kubectl port-forward -n {{ actual_namespace }} svc/<service-name> 8080:80"

    - name: Save deployment info to file
      ansible.builtin.copy:
        content: |
          Deployment Information
          ======================
          Date: {{ ansible_date_time.iso8601 }}
          Target: {{ inventory_hostname }} ({{ ansible_host }})
          App: {{ app_name }}
          Namespace: {{ actual_namespace }}
          Cluster: {{ cluster_endpoint }}
          Kubeconfig: {{ kubeconfig_path }}
          
          Status:
          {{ deployment_status.stdout }}
        dest: "/tmp/deployment-{{ app_name }}-{{ ansible_date_time.epoch }}.log"
      delegate_to: localhost

    - name: Display log file location
      ansible.builtin.debug:
        msg: "📝 Deployment log saved to: /tmp/deployment-{{ app_name }}-{{ ansible_date_time.epoch }}.log"
