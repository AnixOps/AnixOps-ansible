name: Ansible Deploy

on:
  workflow_dispatch:
    inputs:
      playbook:
        description: 'Playbook to deploy'
        required: true
        type: choice
        options:
          - site.yml
          - web-servers.yml
          - observability.yml
          - quick-setup.yml
          - firewall-setup.yml
          - health-check.yml
        default: 'quick-setup.yml'
      
      target_group:
        description: 'Target server group'
        required: true
        type: choice
        options:
          - all
          - web_servers
          - observability
          - proxy_servers
          - dev_servers
          - dev
          - prod
        default: 'all'
      
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
        default: 'development'
      
      skip_roles:
        description: 'Roles to skip (comma-separated, e.g., nginx,prometheus)'
        required: false
        type: string
        default: ''
      
      dry_run:
        description: 'Run in check mode (dry run)'
        required: false
        type: boolean
        default: false
      
      verbose_level:
        description: 'Ansible verbosity level'
        required: false
        type: choice
        options:
          - 'normal'
          - 'verbose (-v)'
          - 'very verbose (-vv)'
          - 'debug (-vvv)'
        default: 'normal'

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Ansible and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add SSH fingerprints to known_hosts (optional)
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Create inventory from secrets
        run: |
          echo "Creating dynamic inventory from GitHub Secrets..."
          cat > inventory/hosts.yml << 'EOF'
          ---
          all:
            children:
              web_servers:
                hosts:
                  de-test-1:
                    ansible_host: "${{ secrets.DE_1_V4_SSH }}"
                    server_alias: "德国-测试-1"
                    location: "Germany"
                  pl-test-1:
                    ansible_host: "${{ secrets.PL_1_V4_SSH }}"
                    server_alias: "波兰-测试-1"
                    location: "Poland"
                vars:
                  server_role: web
              
              observability:
                hosts:
                  pl-test-1:
                    ansible_host: "${{ secrets.PL_1_V4_SSH }}"
                    server_alias: "波兰-监控-1"
                    location: "Poland"
                vars:
                  server_role: observability
              
              dev:
                hosts:
                  de-test-1:
                    ansible_host: "${{ secrets.DE_1_V4_SSH }}"
                vars:
                  environment: development
              
              prod:
                hosts:
                  pl-test-1:
                    ansible_host: "${{ secrets.PL_1_V4_SSH }}"
                vars:
                  environment: production
            
            vars:
              ansible_user: "${{ secrets.ANSIBLE_USER }}"
              ansible_port: "${{ secrets.ANSIBLE_PORT }}"
              ansible_ssh_private_key_file: "~/.ssh/id_rsa"
              ansible_python_interpreter: /usr/bin/python3
              ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
              deployment_timestamp: "${{ github.run_number }}"
              deployed_by: "${{ github.actor }}"
          EOF
          
          echo "✓ Inventory created successfully"

      - name: Display Deployment Configuration
        run: |
          echo "═══════════════════════════════════════════════════════════════"
          echo "🚀 DEPLOYMENT CONFIGURATION"
          echo "═══════════════════════════════════════════════════════════════"
          echo "Playbook:        ${{ github.event.inputs.playbook }}"
          echo "Target Group:    ${{ github.event.inputs.target_group }}"
          echo "Environment:     ${{ github.event.inputs.environment }}"
          echo "Skip Roles:      ${{ github.event.inputs.skip_roles || 'none' }}"
          echo "Dry Run:         ${{ github.event.inputs.dry_run }}"
          echo "Verbosity:       ${{ github.event.inputs.verbose_level }}"
          echo "───────────────────────────────────────────────────────────────"
          echo "Triggered by:    ${{ github.actor }}"
          echo "Run Number:      ${{ github.run_number }}"
          echo "Commit SHA:      ${{ github.sha }}"
          echo "Branch:          ${{ github.ref_name }}"
          echo "═══════════════════════════════════════════════════════════════"

      - name: Verify Connectivity
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'
        run: |
          echo "🔍 Verifying connectivity to target servers..."
          ansible ${{ github.event.inputs.target_group }} \
            -i inventory/hosts.yml \
            -m ping \
            --one-line

      - name: Run Ansible Playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'
          ANSIBLE_FORCE_COLOR: 'True'
        run: |
          # Set verbosity flag
          VERBOSE_FLAG=""
          case "${{ github.event.inputs.verbose_level }}" in
            "verbose (-v)")
              VERBOSE_FLAG="-v"
              ;;
            "very verbose (-vv)")
              VERBOSE_FLAG="-vv"
              ;;
            "debug (-vvv)")
              VERBOSE_FLAG="-vvv"
              ;;
          esac
          
          # Build command
          CMD="ansible-playbook playbooks/${{ github.event.inputs.playbook }}"
          CMD="$CMD -i inventory/hosts.yml"
          CMD="$CMD --limit ${{ github.event.inputs.target_group }}"
          
          # Add optional flags
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            CMD="$CMD --check --diff"
            echo "⚠️  Running in DRY RUN mode (no changes will be made)"
          fi
          
          if [ -n "${{ github.event.inputs.skip_roles }}" ]; then
            CMD="$CMD --skip-tags ${{ github.event.inputs.skip_roles }}"
          fi
          
          if [ -n "$VERBOSE_FLAG" ]; then
            CMD="$CMD $VERBOSE_FLAG"
          fi
          
          echo "═══════════════════════════════════════════════════════════════"
          echo "🎯 Executing Ansible Playbook"
          echo "═══════════════════════════════════════════════════════════════"
          echo "Command: $CMD"
          echo "═══════════════════════════════════════════════════════════════"
          
          # Execute
          eval $CMD

      - name: Run Health Check
        if: success() && github.event.inputs.dry_run != 'true'
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'
        run: |
          echo "═══════════════════════════════════════════════════════════════"
          echo "🏥 Running Post-Deployment Health Check"
          echo "═══════════════════════════════════════════════════════════════"
          
          ansible ${{ github.event.inputs.target_group }} \
            -i inventory/hosts.yml \
            -m shell \
            -a "uptime && df -h / && free -h" \
            --one-line || true

      - name: Deployment Summary
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            STATUS_EMOJI="✅"
            STATUS_TEXT="SUCCESS"
          else
            STATUS_EMOJI="❌"
            STATUS_TEXT="FAILED"
          fi
          
          echo "═══════════════════════════════════════════════════════════════"
          echo "$STATUS_EMOJI DEPLOYMENT $STATUS_TEXT"
          echo "═══════════════════════════════════════════════════════════════"
          echo "Playbook:        ${{ github.event.inputs.playbook }}"
          echo "Target:          ${{ github.event.inputs.target_group }}"
          echo "Environment:     ${{ github.event.inputs.environment }}"
          echo "Dry Run:         ${{ github.event.inputs.dry_run }}"
          echo "───────────────────────────────────────────────────────────────"
          echo "Completed at:    $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Duration:        ${{ job.duration }}s"
          echo "Run ID:          ${{ github.run_id }}"
          echo "═══════════════════════════════════════════════════════════════"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo ""
          echo "Details:"
          echo "  • Playbook: ${{ github.event.inputs.playbook }}"
          echo "  • Target: ${{ github.event.inputs.target_group }}"
          echo "  • Environment: ${{ github.event.inputs.environment }}"
          echo ""
          echo "Please check the logs above for error details."
          echo "Run ID: ${{ github.run_id }}"
