# AnixOps Ansible Environment Variables
# 复制此文件为 .env 并填入真实 IP 地址
# .env 文件不会被提交到 Git (已加入 .gitignore)

# ===========================================
# 服务器 IP 配置
# ===========================================
# 格式: SERVER_NAME_V4=IPv4地址/掩码
#       SERVER_NAME_V6=IPv6地址/掩码
#       SERVER_NAME_SSH_IP=SSH连接IP（可选，仅非/31或/127段需要）
#
# 说明：
# - /31 (IPv4) 或 /127 (IPv6) 段：点对点连接，直接使用该IP
# - 其他网段：必须设置 _SSH_IP 变量指定SSH连接地址

# 美国西部服务器 1 (点对点，直接连接)
US_W_1_V4=203.0.113.10/31
US_W_1_V6=2001:db8::1/127
# US_W_1_SSH_IP=  # /31段不需要

# 美国西部服务器 2 (其他网段，需要SSH IP)
US_W_2_V4=10.0.1.100/24
US_W_2_V6=2001:db8:100::1/64
US_W_2_SSH_IP=203.0.113.20  # 必需：SSH连接IP（公网IP或网关）

# 美国东部服务器
US_E_1_V4=203.0.113.30/31
US_E_1_V6=2001:db8::3/127

# 日本服务器 (内网段示例)
JP_1_V4=10.10.0.50/27
JP_1_V6=2001:db8:200::1/120
JP_1_SSH_IP=45.76.123.45  # 必需：SSH连接IP

# 欧洲服务器
EU_1_V4=203.0.113.50/31
EU_1_V6=2001:db8::5/127

# ===========================================
# Ansible 连接配置
# ===========================================
ANSIBLE_USER=root
ANSIBLE_PORT=22
SSH_KEY_PATH=~/.ssh/id_rsa

# ===========================================
# 可观测性配置 (可选)
# ===========================================
# 基础配置
PROMETHEUS_URL=http://prometheus.example.com:9090
LOKI_URL=http://loki.example.com:3100
GRAFANA_URL=http://grafana.example.com:3000

# SSL/TLS 配置
OBSERVABILITY_SSL_ENABLED=false              # 是否启用 SSL (true/false)
OBSERVABILITY_SSL_METHOD=custom              # SSL 证书方式: custom (自定义证书) 或 acme (Let's Encrypt)

# 域名配置 (启用 SSL 时必需)
GRAFANA_DOMAIN=grafana.example.com
PROMETHEUS_DOMAIN=prometheus.example.com
LOKI_DOMAIN=loki.example.com

# 自定义 SSL 证书配置 (SSL_METHOD=custom 时使用)
# PEM 格式，base64 编码。生成方法: cat cert.pem | base64 -w 0
SSL_CERTIFICATE_PEM=                         # SSL 证书内容（base64 编码）
SSL_CERTIFICATE_KEY_PEM=                     # SSL 私钥内容（base64 编码）

# ACME.sh 配置 (SSL_METHOD=acme 时使用)
ACME_EMAIL=admin@example.com                 # Let's Encrypt 通知邮箱
ACME_CA_SERVER=letsencrypt                   # letsencrypt 或 letsencrypt_test (测试环境)

# ===========================================
# Cloudflare 配置 (可选)
# ===========================================
# 用于 SSL 证书获取和 DNS 管理

# 认证方式 1: API Token (推荐)
CLOUDFLARE_API_TOKEN=                        # Cloudflare API Token
CLOUDFLARE_ZONE_ID=                          # Zone ID

# 认证方式 2: Global API Key (备选)
CLOUDFLARE_EMAIL=                            # Cloudflare 账户邮箱
CLOUDFLARE_API_KEY=                          # Global API Key

# DNS 配置
CLOUDFLARE_BASE_DOMAIN=example.com           # 基础域名

# ===========================================
# Grafana 认证配置 (可选)
# ===========================================
# 如果不配置，将使用默认值 admin/admin
GRAFANA_ADMIN_USER=admin                     # Grafana 管理员用户名
GRAFANA_ADMIN_PASSWORD=                      # Grafana 管理员密码 (留空则为 admin)

# ===========================================
# 防火墙白名单配置 (可选)
# ===========================================
# 允许访问可观测性服务端口 (9090, 3100, 3000, 9100) 的 IP 地址
# 多个 IP 用逗号分隔，例如: 1.2.3.4,5.6.7.8
# 留空则只允许本地 (127.0.0.1) 访问
# 使用 'any' 允许所有 IP（不推荐生产环境）
OBSERVABILITY_WHITELIST_IPS=                 # 白名单 IP 列表

# ===========================================
# Cloudflare Tunnel 配置
# ===========================================
# 用于零信任网络架构 (Zero Trust Networking)
# 
# 📖 获取 Account ID 和 API Token 的步骤:
#   Account ID:
#     1. 登录 Cloudflare Dashboard
#     2. 在右侧边栏查看 Account ID
#   
#   API Token:
#     1. 访问 https://dash.cloudflare.com/profile/api-tokens
#     2. Create Token -> Edit Cloudflare Zero Trust
#     3. 复制生成的 Token
#
# 📖 获取 Tunnel Token 的步骤 (手动方式):
#   1. 登录 Cloudflare Zero Trust Dashboard
#   2. 进入 Access -> Tunnels
#   3. 创建或选择一个 Tunnel
#   4. 复制 Token (以 'eyJ' 开头的长字符串)
#
# ⚠️  安全警告:
#   - 这些 Token 拥有连接到你的 Cloudflare 账户的权限
#   - 绝对不要将包含真实 Token 的 .env 文件提交到 Git
#   - .env 文件已在 .gitignore 中
#
# 🔐 最佳实践:
#   本地开发: 使用 .env 文件 (source .env)
#   CI/CD: 使用 GitHub Secrets
#   自动化: 使用 tools/tunnel_manager.py 通过 API 创建 Tunnel

# =========================================================================
# Cloudflare API Token (用于管理 Cloudflare 资源)
# Cloudflare API Token (for managing Cloudflare resources)
# =========================================================================
# 用途: 通过 API 管理 Tunnel、DNS、Zone 等 Cloudflare 资源
# Usage: Manage Tunnel, DNS, Zone and other Cloudflare resources via API
#
# 获取方式 | How to get:
#   1. 登录 https://dash.cloudflare.com/profile/api-tokens
#   2. 点击 "Create Token" 或使用 "Edit Cloudflare Tunnels" 模板
#   3. 设置权限:
#      - Account > Cloudflare Tunnel > Edit
#      - Zone > DNS > Edit (如果需要管理 DNS)
#   4. 复制生成的 API Token
#
# 工具使用: tunnel_manager.py, cloudflare_manager.py 等
# Used by: tunnel_manager.py, cloudflare_manager.py, etc.
# =========================================================================
export CLOUDFLARE_API_TOKEN=your-cloudflare-api-token-here

# Cloudflare Account ID (用于 API 操作)
export CLOUDFLARE_ACCOUNT_ID=your-cloudflare-account-id-here

# =========================================================================
# Cloudflare Tunnel Token (用于 cloudflared 连接)
# Cloudflare Tunnel Token (for cloudflared connection)
# =========================================================================
# 用途: cloudflared 客户端连接到 Cloudflare 网络的认证 Token
# Usage: Authentication token for cloudflared client to connect to Cloudflare
#
# 获取方式 | How to get:
#   方式 1: 从 Cloudflare Dashboard 手动获取
#     1. 登录 https://one.dash.cloudflare.com/
#     2. 导航到 Access -> Tunnels
#     3. 创建或选择一个 Tunnel
#     4. 复制 Tunnel Token (以 eyJ 开头的长字符串)
#
#   方式 2: 使用 tunnel_manager.py 自动创建
#     python tools/tunnel_manager.py create MyTunnel \
#       --account-id $CLOUDFLARE_ACCOUNT_ID \
#       --api-token $CLOUDFLARE_API_TOKEN
#     # Token 会自动输出，可保存到此变量
#
# 工具使用: Ansible playbooks, Kubernetes deployments
# Used by: Ansible playbooks, Kubernetes deployments
# =========================================================================
export CLOUDFLARE_TUNNEL_TOKEN=your-cloudflare-tunnel-token-here

# ===========================================
# Ansible Vault 密码 (可选)
# ===========================================
# 如果使用 Ansible Vault 加密变量文件，请设置此密码
# export ANSIBLE_VAULT_PASSWORD=your-vault-password-here
