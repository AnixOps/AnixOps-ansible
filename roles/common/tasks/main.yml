# =============================================================================
# Common Role - 基础配置任务 | Common Role - Basic Configuration Tasks
# =============================================================================
# 此角色负责服务器的基础配置和安全加固
# This role is responsible for basic server configuration and security hardening
#
# 功能 | Features:
#   - 主机名配置 | Hostname configuration
#   - 系统包管理 | System package management
#   - 时区和本地化 | Timezone and localization
#   - NTP 时间同步 | NTP time synchronization
#   - 用户管理 | User management
#   - SSH 安全配置 | SSH security configuration
#   - Fail2Ban 防护 | Fail2Ban protection
#   - 系统参数优化 | System parameter optimization
# =============================================================================

# -----------------------------------------------------------------------------
# 主机名配置 | Hostname Configuration
# -----------------------------------------------------------------------------
- name: Set server hostname | 设置服务器主机名
  hostname:
    name: "{{ inventory_hostname }}"
  when: inventory_hostname is defined

- name: Update /etc/hosts with new hostname | 更新 /etc/hosts 文件
  lineinfile:
    path: /etc/hosts
    regexp: '^127\.0\.1\.1'
    line: "127.0.1.1 {{ inventory_hostname }}"
    state: present
  when: inventory_hostname is defined

- name: Display hostname change | 显示主机名更改
  debug:
    msg: "主机名已设置为 | Hostname set to: {{ inventory_hostname }}"

# -----------------------------------------------------------------------------
# 更新包缓存 | Update Package Cache
# -----------------------------------------------------------------------------
- name: Update apt cache (Debian/Ubuntu) | 更新 apt 缓存 (Debian/Ubuntu)
  apt:
    update_cache: yes
    cache_valid_time: 3600
  when: ansible_os_family == "Debian"

- name: Update yum cache (RedHat/CentOS) | 更新 yum 缓存 (RedHat/CentOS)
  yum:
    update_cache: yes
  when: ansible_os_family == "RedHat"

# -----------------------------------------------------------------------------
# 安装常用软件包 | Install Common Packages
# -----------------------------------------------------------------------------
- name: Install common packages | 安装常用软件包
  package:
    name: "{{ common_packages }}"
    state: present

# -----------------------------------------------------------------------------
# 时区和本地化配置 | Timezone and Localization Configuration
# -----------------------------------------------------------------------------
- name: Set timezone | 设置时区
  timezone:
    name: "{{ timezone }}"

- name: Set system locale | 设置系统区域设置
  locale_gen:
    name: "{{ locale }}"
    state: present
  when: ansible_os_family == "Debian"

# -----------------------------------------------------------------------------
# NTP 时间同步配置 | NTP Time Synchronization Configuration
# -----------------------------------------------------------------------------
- name: Ensure chrony config directory exists | 确保 chrony 配置目录存在
  file:
    path: /etc/chrony
    state: directory
    mode: '0755'
  when: ansible_os_family == "Debian"

- name: Configure NTP servers (Debian/Ubuntu) | 配置 NTP 服务器 (Debian/Ubuntu)
  template:
    src: chrony.conf.j2
    dest: /etc/chrony/chrony.conf
    mode: '0644'
  notify: restart chrony
  when: ansible_os_family == "Debian"

- name: Configure NTP servers (RedHat/CentOS) | 配置 NTP 服务器 (RedHat/CentOS)
  template:
    src: chrony.conf.j2
    dest: /etc/chrony.conf
    mode: '0644'
  notify: restart chrony
  when: ansible_os_family == "RedHat"

- name: Ensure chrony is running (RedHat/CentOS) | 确保 chrony 运行中 (RedHat/CentOS)
  service:
    name: chronyd
    state: started
    enabled: yes
  when: ansible_os_family == "RedHat"

- name: Ensure chrony is running (Debian/Ubuntu) | 确保 chrony 运行中 (Debian/Ubuntu)
  service:
    name: chrony
    state: started
    enabled: yes
  when: ansible_os_family == "Debian"

# -----------------------------------------------------------------------------
# 用户管理 | User Management
# -----------------------------------------------------------------------------
- name: Create admin users (Debian/Ubuntu) | 创建管理员用户 (Debian/Ubuntu)
  user:
    name: "{{ item.name }}"
    shell: "{{ item.shell }}"
    groups: sudo
    state: "{{ item.state }}"
    create_home: yes
  loop: "{{ admin_users }}"
  when: 
    - admin_users is defined
    - ansible_os_family == "Debian"

- name: Create admin users (RedHat/CentOS) | 创建管理员用户 (RedHat/CentOS)
  user:
    name: "{{ item.name }}"
    shell: "{{ item.shell }}"
    groups: wheel
    state: "{{ item.state }}"
    create_home: yes
  loop: "{{ admin_users }}"
  when: 
    - admin_users is defined
    - ansible_os_family == "RedHat"

# -----------------------------------------------------------------------------
# SSH 安全配置 | SSH Security Configuration
# -----------------------------------------------------------------------------
- name: Configure SSH | 配置 SSH
  template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config
    mode: '0600'
    backup: yes
    validate: '/usr/sbin/sshd -t -f %s'
  notify: restart sshd

- name: Ensure SSH service is enabled and started | 确保 SSH 服务已启用并启动
  service:
    name: "{{ 'sshd' if ansible_os_family == 'RedHat' else 'ssh' }}"
    state: started
    enabled: yes

- name: Apply sysctl parameters
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
    ignoreerrors: yes
  loop: "{{ sysctl_config | dict2items }}"
  when: sysctl_config is defined

- name: Configure system limits
  pam_limits:
    domain: "{{ item.domain }}"
    limit_type: "{{ item.limit_type }}"
    limit_item: "{{ item.limit_item }}"
    value: "{{ item.value }}"
  loop: "{{ security.limits }}"
  when: security.limits is defined

- name: Install fail2ban
  package:
    name: fail2ban
    state: present
  when: security.fail2ban_enabled | default(false)

- name: Configure fail2ban
  template:
    src: jail.local.j2
    dest: /etc/fail2ban/jail.local
    mode: '0644'
  notify: restart fail2ban
  when: security.fail2ban_enabled | default(false)

- name: Ensure fail2ban is running
  service:
    name: fail2ban
    state: started
    enabled: yes
  when: security.fail2ban_enabled | default(false)

- name: Install UFW (Ubuntu/Debian)
  package:
    name: ufw
    state: present
  when:
    - ansible_os_family == "Debian"
    - firewall_enabled | default(false)

- name: Configure UFW firewall (Ubuntu/Debian)
  block:
    - name: Allow SSH
      ufw:
        rule: allow
        port: "{{ ssh_port }}"
        proto: tcp

    - name: Allow configured ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop: "{{ firewall_allowed_ports }}"

    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny
  when: 
    - ansible_os_family == "Debian"
    - firewall_enabled | default(false)

- name: Configure firewalld (RedHat/CentOS)
  block:
    - name: Allow SSH
      firewalld:
        port: "{{ ssh_port }}/tcp"
        permanent: yes
        state: enabled

    - name: Allow configured ports
      firewalld:
        port: "{{ item }}/tcp"
        permanent: yes
        state: enabled
      loop: "{{ firewall_allowed_ports }}"

    - name: Reload firewalld
      command: firewall-cmd --reload
  when: 
    - ansible_os_family == "RedHat"
    - firewall_enabled | default(false)

- name: Disable unnecessary services
  service:
    name: "{{ item }}"
    state: stopped
    enabled: no
  loop:
    - avahi-daemon
    - cups
  ignore_errors: yes
